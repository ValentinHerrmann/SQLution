{"version":3,"file":"markdown-it.js","sources":["../../../node_modules/markdown-it/lib/common/utils.mjs","../../../node_modules/markdown-it/lib/helpers/parse_link_label.mjs","../../../node_modules/markdown-it/lib/helpers/parse_link_destination.mjs","../../../node_modules/markdown-it/lib/helpers/parse_link_title.mjs","../../../node_modules/markdown-it/lib/renderer.mjs","../../../node_modules/markdown-it/lib/ruler.mjs","../../../node_modules/markdown-it/lib/token.mjs","../../../node_modules/markdown-it/lib/rules_core/state_core.mjs","../../../node_modules/markdown-it/lib/rules_core/normalize.mjs","../../../node_modules/markdown-it/lib/rules_core/block.mjs","../../../node_modules/markdown-it/lib/rules_core/inline.mjs","../../../node_modules/markdown-it/lib/rules_core/linkify.mjs","../../../node_modules/markdown-it/lib/rules_core/replacements.mjs","../../../node_modules/markdown-it/lib/rules_core/smartquotes.mjs","../../../node_modules/markdown-it/lib/rules_core/text_join.mjs","../../../node_modules/markdown-it/lib/parser_core.mjs","../../../node_modules/markdown-it/lib/rules_block/state_block.mjs","../../../node_modules/markdown-it/lib/rules_block/table.mjs","../../../node_modules/markdown-it/lib/rules_block/code.mjs","../../../node_modules/markdown-it/lib/rules_block/fence.mjs","../../../node_modules/markdown-it/lib/rules_block/blockquote.mjs","../../../node_modules/markdown-it/lib/rules_block/hr.mjs","../../../node_modules/markdown-it/lib/rules_block/list.mjs","../../../node_modules/markdown-it/lib/rules_block/reference.mjs","../../../node_modules/markdown-it/lib/common/html_blocks.mjs","../../../node_modules/markdown-it/lib/common/html_re.mjs","../../../node_modules/markdown-it/lib/rules_block/html_block.mjs","../../../node_modules/markdown-it/lib/rules_block/heading.mjs","../../../node_modules/markdown-it/lib/rules_block/lheading.mjs","../../../node_modules/markdown-it/lib/rules_block/paragraph.mjs","../../../node_modules/markdown-it/lib/parser_block.mjs","../../../node_modules/markdown-it/lib/rules_inline/state_inline.mjs","../../../node_modules/markdown-it/lib/rules_inline/text.mjs","../../../node_modules/markdown-it/lib/rules_inline/linkify.mjs","../../../node_modules/markdown-it/lib/rules_inline/newline.mjs","../../../node_modules/markdown-it/lib/rules_inline/escape.mjs","../../../node_modules/markdown-it/lib/rules_inline/backticks.mjs","../../../node_modules/markdown-it/lib/rules_inline/strikethrough.mjs","../../../node_modules/markdown-it/lib/rules_inline/emphasis.mjs","../../../node_modules/markdown-it/lib/rules_inline/link.mjs","../../../node_modules/markdown-it/lib/rules_inline/image.mjs","../../../node_modules/markdown-it/lib/rules_inline/autolink.mjs","../../../node_modules/markdown-it/lib/rules_inline/html_inline.mjs","../../../node_modules/markdown-it/lib/rules_inline/entity.mjs","../../../node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs","../../../node_modules/markdown-it/lib/rules_inline/fragments_join.mjs","../../../node_modules/markdown-it/lib/parser_inline.mjs","../../../node_modules/markdown-it/lib/presets/default.mjs","../../../node_modules/markdown-it/lib/presets/zero.mjs","../../../node_modules/markdown-it/lib/presets/commonmark.mjs","../../../node_modules/markdown-it/lib/index.mjs"],"sourcesContent":["// Utilities\n//\n\nimport * as mdurl from 'mdurl'\nimport * as ucmicro from 'uc.micro'\nimport { decodeHTML } from 'entities'\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\n\nfunction isString (obj) { return _class(obj) === '[object String]' }\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction has (object, key) {\n  return _hasOwnProperty.call(object, key)\n}\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object')\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt (src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))\n}\n\nfunction isValidEntityCode (c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false }\n  if (c === 0x0B) { return false }\n  if (c >= 0x0E && c <= 0x1F) { return false }\n  if (c >= 0x7F && c <= 0x9F) { return false }\n  // out of range\n  if (c > 0x10FFFF) { return false }\n  return true\n}\n\nfunction fromCodePoint (c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000\n    const surrogate1 = 0xd800 + (c >> 10)\n    const surrogate2 = 0xdc00 + (c & 0x3ff)\n\n    return String.fromCharCode(surrogate1, surrogate2)\n  }\n  return String.fromCharCode(c)\n}\n\nconst UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g\nconst ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi')\n\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i\n\nfunction replaceEntityPattern (match, name) {\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x'\n      ? parseInt(name.slice(2), 16)\n      : parseInt(name.slice(1), 10)\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code)\n    }\n\n    return match\n  }\n\n  const decoded = decodeHTML(match)\n  if (decoded !== match) {\n    return decoded\n  }\n\n  return match\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd (str) {\n  if (str.indexOf('\\\\') < 0) { return str }\n  return str.replace(UNESCAPE_MD_RE, '$1')\n}\n\nfunction unescapeAll (str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped }\n    return replaceEntityPattern(match, entity)\n  })\n}\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n}\n\nfunction replaceUnsafeChar (ch) {\n  return HTML_REPLACEMENTS[ch]\n}\n\nfunction escapeHtml (str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)\n  }\n  return str\n}\n\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g\n\nfunction escapeRE (str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&')\n}\n\nfunction isSpace (code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true\n  }\n  return false\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace (code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true\n  }\n  return false\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar (ch) {\n  return ucmicro.P.test(ch) || ucmicro.S.test(ch)\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct (ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference (str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ')\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß')\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase()\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = { mdurl, ucmicro }\n\nexport {\n  lib,\n  assign,\n  isString,\n  has,\n  unescapeMd,\n  unescapeAll,\n  isValidEntityCode,\n  fromCodePoint,\n  escapeHtml,\n  arrayReplaceAt,\n  isSpace,\n  isWhiteSpace,\n  isMdAsciiPunct,\n  isPunctChar,\n  escapeRE,\n  normalizeReference\n}\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nexport default function parseLinkLabel (state, start, disableNested) {\n  let level, found, marker, prevPos\n\n  const max = state.posMax\n  const oldPos = state.pos\n\n  state.pos = start + 1\n  level = 1\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos)\n    if (marker === 0x5D /* ] */) {\n      level--\n      if (level === 0) {\n        found = true\n        break\n      }\n    }\n\n    prevPos = state.pos\n    state.md.inline.skipToken(state)\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++\n      } else if (disableNested) {\n        state.pos = oldPos\n        return -1\n      }\n    }\n  }\n\n  let labelEnd = -1\n\n  if (found) {\n    labelEnd = state.pos\n  }\n\n  // restore old state\n  state.pos = oldPos\n\n  return labelEnd\n}\n","// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n","// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nexport default function parseLinkTitle (str, start, max, prev_state) {\n  let code\n  let pos = start\n\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  }\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str\n    state.marker = prev_state.marker\n  } else {\n    if (pos >= max) { return state }\n\n    let marker = str.charCodeAt(pos)\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }\n\n    start++\n    pos++\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) { marker = 0x29 }\n\n    state.marker = marker\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === state.marker) {\n      state.pos = pos + 1\n      state.str += unescapeAll(str.slice(start, pos))\n      state.ok = true\n      return state\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n    }\n\n    pos++\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true\n  state.str += unescapeAll(str.slice(start, pos))\n  return state\n}\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n","// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token (type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = ''\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = ''\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = ''\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex (name) {\n  if (!this.attrs) { return -1 }\n\n  const attrs = this.attrs\n\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i }\n  }\n  return -1\n}\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush (attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData)\n  } else {\n    this.attrs = [attrData]\n  }\n}\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet (name, value) {\n  const idx = this.attrIndex(name)\n  const attrData = [name, value]\n\n  if (idx < 0) {\n    this.attrPush(attrData)\n  } else {\n    this.attrs[idx] = attrData\n  }\n}\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet (name) {\n  const idx = this.attrIndex(name)\n  let value = null\n  if (idx >= 0) {\n    value = this.attrs[idx][1]\n  }\n  return value\n}\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin (name, value) {\n  const idx = this.attrIndex(name)\n\n  if (idx < 0) {\n    this.attrPush([name, value])\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value\n  }\n}\n\nexport default Token\n","// Core state object\n//\n\nimport Token from '../token.mjs'\n\nfunction StateCore (src, md, env) {\n  this.src = src\n  this.env = env\n  this.tokens = []\n  this.inlineMode = false\n  this.md = md // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token\n\nexport default StateCore\n","// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE  = /\\r\\n?|\\n/g\nconst NULL_RE      = /\\0/g\n\nexport default function normalize (state) {\n  let str\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n')\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD')\n\n  state.src = str\n}\n","export default function block (state) {\n  let token\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0)\n    token.content  = state.src\n    token.map      = [0, 1]\n    token.children = []\n    state.tokens.push(token)\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens)\n  }\n}\n","export default function inline (state) {\n  const tokens = state.tokens\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i]\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children)\n    }\n  }\n}\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n","// Convert straight quotation marks to typographic ones\n//\n\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nconst QUOTE_TEST_RE = /['\"]/\nconst QUOTE_RE = /['\"]/g\nconst APOSTROPHE = '\\u2019' /* ’ */\n\nfunction replaceAt (str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1)\n}\n\nfunction process_inlines (tokens, state) {\n  let j\n\n  const stack = []\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    const thisLevel = tokens[i].level\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break }\n    }\n    stack.length = j + 1\n\n    if (token.type !== 'text') { continue }\n\n    let text = token.content\n    let pos = 0\n    let max = text.length\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos\n      const t = QUOTE_RE.exec(text)\n      if (!t) { break }\n\n      let canOpen = true\n      let canClose = true\n      pos = t.index + 1\n      const isSingle = (t[0] === \"'\")\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1)\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)\n          break\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos)\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0)\n          break\n        }\n      }\n\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n      const isLastWhiteSpace = isWhiteSpace(lastChar)\n      const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n      if (isNextWhiteSpace) {\n        canOpen = false\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar\n        canClose = isNextPunctChar\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE)\n        }\n        continue\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j]\n          if (stack[j].level < thisLevel) { break }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j]\n\n            let openQuote\n            let closeQuote\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2]\n              closeQuote = state.md.options.quotes[3]\n            } else {\n              openQuote = state.md.options.quotes[0]\n              closeQuote = state.md.options.quotes[1]\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote)\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote)\n\n            pos += closeQuote.length - 1\n            if (item.token === i) { pos += openQuote.length - 1 }\n\n            text = token.content\n            max = text.length\n\n            stack.length = j\n            continue OUTER\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        })\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE)\n      }\n    }\n  }\n}\n\nexport default function smartquotes (state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) { return }\n\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state)\n  }\n}\n","// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n","// Parser state class\n\nimport Token from '../token.mjs'\nimport { isSpace } from '../common/utils.mjs'\n\nfunction StateBlock (src, md, env, tokens) {\n  this.src = src\n\n  // link to parser instance\n  this.md     = md\n\n  this.env = env\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens\n\n  this.bMarks = []  // line begin offsets for fast jumps\n  this.eMarks = []  // line end offsets for fast jumps\n  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = []\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent  = 0\n  this.line       = 0 // line index in src\n  this.lineMax    = 0 // lines count\n  this.tight      = false  // loose/tight mode for lists\n  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root'\n\n  this.level = 0\n\n  // Create caches\n  // Generate markers.\n  const s = this.src\n\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos)\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4\n        } else {\n          offset++\n        }\n        continue\n      } else {\n        indent_found = true\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++ }\n      this.bMarks.push(start)\n      this.eMarks.push(pos)\n      this.tShift.push(indent)\n      this.sCount.push(offset)\n      this.bsCount.push(0)\n\n      indent_found = false\n      indent = 0\n      offset = 0\n      start = pos + 1\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length)\n  this.eMarks.push(s.length)\n  this.tShift.push(0)\n  this.sCount.push(0)\n  this.bsCount.push(0)\n\n  this.lineMax = this.bMarks.length - 1 // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting)\n  token.block = true\n\n  if (nesting < 0) this.level-- // closing tag\n  token.level = this.level\n  if (nesting > 0) this.level++ // opening tag\n\n  this.tokens.push(token)\n  return token\n}\n\nStateBlock.prototype.isEmpty = function isEmpty (line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]\n}\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break\n    }\n  }\n  return from\n}\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces (pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n  }\n  return pos\n}\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }\n  }\n  return pos\n}\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars (pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break }\n  }\n  return pos\n}\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }\n  }\n  return pos\n}\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return ''\n  }\n\n  const queue = new Array(end - begin)\n\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0\n    const lineStart = this.bMarks[line]\n    let first = lineStart\n    let last\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1\n    } else {\n      last = this.eMarks[line]\n    }\n\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first)\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4\n        } else {\n          lineIndent++\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++\n      } else {\n        break\n      }\n\n      first++\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)\n    } else {\n      queue[i] = this.src.slice(first, last)\n    }\n  }\n\n  return queue.join('')\n}\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token\n\nexport default StateBlock\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst MAX_AUTOCOMPLETED_CELLS = 0x10000\n\nfunction getLine (state, line) {\n  const pos = state.bMarks[line] + state.tShift[line]\n  const max = state.eMarks[line]\n\n  return state.src.slice(pos, max)\n}\n\nfunction escapedSplit (str) {\n  const result = []\n  const max = str.length\n\n  let pos = 0\n  let ch = str.charCodeAt(pos)\n  let isEscaped = false\n  let lastPos = 0\n  let current = ''\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos))\n        current = ''\n        lastPos = pos + 1\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1)\n        lastPos = pos\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */)\n    pos++\n\n    ch = str.charCodeAt(pos)\n  }\n\n  result.push(current + str.substring(lastPos))\n\n  return result\n}\n\nexport default function table (state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false }\n\n  let nextLine = startLine + 1\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const firstCh = state.src.charCodeAt(pos++)\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }\n\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const secondCh = state.src.charCodeAt(pos++)\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }\n\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }\n\n    pos++\n  }\n\n  let lineText = getLine(state, startLine + 1)\n  let columns = lineText.split('|')\n  const aligns = []\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim()\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue\n      } else {\n        return false\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left')\n    } else {\n      aligns.push('')\n    }\n  }\n\n  lineText = getLine(state, startLine).trim()\n  if (lineText.indexOf('|') === -1) { return false }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n  columns = escapedSplit(lineText)\n  if (columns.length && columns[0] === '') columns.shift()\n  if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length\n  if (columnCount === 0 || columnCount !== aligns.length) { return false }\n\n  if (silent) { return true }\n\n  const oldParentType = state.parentType\n  state.parentType = 'table'\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const token_to = state.push('table_open', 'table', 1)\n  const tableLines = [startLine, 0]\n  token_to.map = tableLines\n\n  const token_tho = state.push('thead_open', 'thead', 1)\n  token_tho.map = [startLine, startLine + 1]\n\n  const token_htro = state.push('tr_open', 'tr', 1)\n  token_htro.map = [startLine, startLine + 1]\n\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1)\n    if (aligns[i]) {\n      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]\n    }\n\n    const token_il = state.push('inline', '', 0)\n    token_il.content  = columns[i].trim()\n    token_il.children = []\n\n    state.push('th_close', 'th', -1)\n  }\n\n  state.push('tr_close', 'tr', -1)\n  state.push('thead_close', 'thead', -1)\n\n  let tbodyLines\n  let autocompletedCells = 0\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) { break }\n    lineText = getLine(state, nextLine).trim()\n    if (!lineText) { break }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n    columns = escapedSplit(lineText)\n    if (columns.length && columns[0] === '') columns.shift()\n    if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n    // note: autocomplete count can be negative if user specifies more columns than header,\n    // but that does not affect intended use (which is limiting expansion)\n    autocompletedCells += columnCount - columns.length\n    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }\n\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1)\n      token_tbo.map = tbodyLines = [startLine + 2, 0]\n    }\n\n    const token_tro = state.push('tr_open', 'tr', 1)\n    token_tro.map = [nextLine, nextLine + 1]\n\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1)\n      if (aligns[i]) {\n        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]\n      }\n\n      const token_il = state.push('inline', '', 0)\n      token_il.content  = columns[i] ? columns[i].trim() : ''\n      token_il.children = []\n\n      state.push('td_close', 'td', -1)\n    }\n    state.push('tr_close', 'tr', -1)\n  }\n\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1)\n    tbodyLines[1] = nextLine\n  }\n\n  state.push('table_close', 'table', -1)\n  tableLines[1] = nextLine\n\n  state.parentType = oldParentType\n  state.line = nextLine\n  return true\n}\n","// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// fences (``` lang, ~~~ lang)\n\nexport default function fence (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (pos + 3 > max) { return false }\n\n  const marker = state.src.charCodeAt(pos)\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false\n  }\n\n  // scan marker length\n  let mem = pos\n  pos = state.skipChars(pos, marker)\n\n  let len = pos - mem\n\n  if (len < 3) { return false }\n\n  const markup = state.src.slice(mem, pos)\n  const params = state.src.slice(pos, max)\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true }\n\n  // search end of block\n  let nextLine = startLine\n  let haveEndMarker = false\n\n  for (;;) {\n    nextLine++\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue\n    }\n\n    pos = state.skipChars(pos, marker)\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos)\n\n    if (pos < max) { continue }\n\n    haveEndMarker = true\n    // found!\n    break\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine]\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n  const token   = state.push('fence', 'code', 0)\n  token.info    = params\n  token.content = state.getLines(startLine + 1, nextLine, len, true)\n  token.markup  = markup\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// Block quotes\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function blockquote (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  const oldLineMax = state.lineMax\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true }\n\n  const oldBMarks  = []\n  const oldBSCount = []\n  const oldSCount  = []\n  const oldTShift  = []\n\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const oldParentType = state.parentType\n  state.parentType = 'blockquote'\n  let lastLineEmpty = false\n  let nextLine\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1\n      let spaceAfterMarker\n      let adjustTab\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++\n        initial++\n        adjustTab = false\n        spaceAfterMarker = true\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++\n          initial++\n          adjustTab = false\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true\n        }\n      } else {\n        spaceAfterMarker = false\n      }\n\n      let offset = initial\n      oldBMarks.push(state.bMarks[nextLine])\n      state.bMarks[nextLine] = pos\n\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos)\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4\n          } else {\n            offset++\n          }\n        } else {\n          break\n        }\n\n        pos++\n      }\n\n      lastLineEmpty = pos >= max\n\n      oldBSCount.push(state.bsCount[nextLine])\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)\n\n      oldSCount.push(state.sCount[nextLine])\n      state.sCount[nextLine] = offset - initial\n\n      oldTShift.push(state.tShift[nextLine])\n      state.tShift[nextLine] = pos - state.bMarks[nextLine]\n      continue\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break }\n\n    // Case 3: another tag found.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine])\n        oldBSCount.push(state.bsCount[nextLine])\n        oldTShift.push(state.tShift[nextLine])\n        oldSCount.push(state.sCount[nextLine])\n        state.sCount[nextLine] -= state.blkIndent\n      }\n\n      break\n    }\n\n    oldBMarks.push(state.bMarks[nextLine])\n    oldBSCount.push(state.bsCount[nextLine])\n    oldTShift.push(state.tShift[nextLine])\n    oldSCount.push(state.sCount[nextLine])\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1\n  }\n\n  const oldIndent = state.blkIndent\n  state.blkIndent = 0\n\n  const token_o  = state.push('blockquote_open', 'blockquote', 1)\n  token_o.markup = '>'\n  const lines = [startLine, 0]\n  token_o.map    = lines\n\n  state.md.block.tokenize(state, startLine, nextLine)\n\n  const token_c  = state.push('blockquote_close', 'blockquote', -1)\n  token_c.markup = '>'\n\n  state.lineMax = oldLineMax\n  state.parentType = oldParentType\n  lines[1] = state.line\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i]\n    state.tShift[i + startLine] = oldTShift[i]\n    state.sCount[i + startLine] = oldSCount[i]\n    state.bsCount[i + startLine] = oldBSCount[i]\n  }\n  state.blkIndent = oldIndent\n\n  return true\n}\n","// Horizontal rule\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function hr (state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine]\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  const marker = state.src.charCodeAt(pos++)\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++)\n    if (ch !== marker && !isSpace(ch)) { return false }\n    if (ch === marker) { cnt++ }\n  }\n\n  if (cnt < 3) { return false }\n\n  if (silent) { return true }\n\n  state.line = startLine + 1\n\n  const token  = state.push('hr', 'hr', 0)\n  token.map    = [startLine, state.line]\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))\n\n  return true\n}\n","// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n","import { isSpace, normalizeReference } from '../common/utils.mjs'\n\nexport default function reference (state, startLine, _endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n  let nextLine = startLine + 1\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }\n\n  function getNextLine (nextLine) {\n    const endLine = state.lineMax\n\n    if (nextLine >= endLine || state.isEmpty(nextLine)) {\n      // empty line or end of input\n      return null\n    }\n\n    let isContinuation = false\n\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { isContinuation = true }\n\n    if (!isContinuation) {\n      const terminatorRules = state.md.block.ruler.getRules('reference')\n      const oldParentType = state.parentType\n      state.parentType = 'reference'\n\n      // Some tags can terminate paragraph without empty line.\n      let terminate = false\n      for (let i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true\n          break\n        }\n      }\n\n      state.parentType = oldParentType\n      if (terminate) {\n        // terminated by another block\n        return null\n      }\n    }\n\n    const pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    const max = state.eMarks[nextLine]\n\n    // max + 1 explicitly includes the newline\n    return state.src.slice(pos, max + 1)\n  }\n\n  let str = state.src.slice(pos, max + 1)\n\n  max = str.length\n  let labelEnd = -1\n\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x5B /* [ */) {\n      return false\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos\n      break\n    } else if (ch === 0x0A /* \\n */) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (ch === 0x5C /* \\ */) {\n      pos++\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        const lineContent = getNextLine(nextLine)\n        if (lineContent !== null) {\n          str += lineContent\n          max = str.length\n          nextLine++\n        }\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)\n  if (!destRes.ok) { return false }\n\n  const href = state.md.normalizeLink(destRes.str)\n  if (!state.md.validateLink(href)) { return false }\n\n  pos = destRes.pos\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos\n  const destEndLineNo = nextLine\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max)\n  while (titleRes.can_continue) {\n    const lineContent = getNextLine(nextLine)\n    if (lineContent === null) break\n    str += lineContent\n    pos = max\n    max = str.length\n    nextLine++\n    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes)\n  }\n  let title\n\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str\n    pos = titleRes.pos\n  } else {\n    title = ''\n    pos = destEndPos\n    nextLine = destEndLineNo\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n    pos++\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = ''\n      pos = destEndPos\n      nextLine = destEndLineNo\n      while (pos < max) {\n        const ch = str.charCodeAt(pos)\n        if (!isSpace(ch)) { break }\n        pos++\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false\n  }\n\n  const label = normalizeReference(str.slice(1, labelEnd))\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) { return true }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {}\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title, href }\n  }\n\n  state.line = nextLine\n  return true\n}\n","// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nexport default [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n","// Regexps to match html elements\n\nconst attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*'\n\nconst unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+'\nconst single_quoted = \"'[^']*'\"\nconst double_quoted = '\"[^\"]*\"'\n\nconst attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')'\n\nconst attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)'\n\nconst open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>'\n\nconst close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>'\nconst comment     = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->'\nconst processing  = '<[?][\\\\s\\\\S]*?[?]>'\nconst declaration = '<![A-Za-z][^>]*>'\nconst cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'\n\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')')\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')')\n\nexport { HTML_TAG_RE, HTML_OPEN_CLOSE_TAG_RE }\n","// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n","// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n","// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Paragraph\n\nexport default function paragraph (state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n  const oldParentType = state.parentType\n  let nextLine = startLine + 1\n  state.parentType = 'paragraph'\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine\n\n  const token_o    = state.push('paragraph_open', 'p', 1)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  state.push('paragraph_close', 'p', -1)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateBlock from './rules_block/state_block.mjs'\n\nimport r_table from './rules_block/table.mjs'\nimport r_code from './rules_block/code.mjs'\nimport r_fence from './rules_block/fence.mjs'\nimport r_blockquote from './rules_block/blockquote.mjs'\nimport r_hr from './rules_block/hr.mjs'\nimport r_list from './rules_block/list.mjs'\nimport r_reference from './rules_block/reference.mjs'\nimport r_html_block from './rules_block/html_block.mjs'\nimport r_heading from './rules_block/heading.mjs'\nimport r_lheading from './rules_block/lheading.mjs'\nimport r_paragraph from './rules_block/paragraph.mjs'\n\nconst _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table',      r_table,      ['paragraph', 'reference']],\n  ['code',       r_code],\n  ['fence',      r_fence,      ['paragraph', 'reference', 'blockquote', 'list']],\n  ['blockquote', r_blockquote, ['paragraph', 'reference', 'blockquote', 'list']],\n  ['hr',         r_hr,         ['paragraph', 'reference', 'blockquote', 'list']],\n  ['list',       r_list,       ['paragraph', 'reference', 'blockquote']],\n  ['reference',  r_reference],\n  ['html_block', r_html_block, ['paragraph', 'reference', 'blockquote']],\n  ['heading',    r_heading,    ['paragraph', 'reference', 'blockquote']],\n  ['lheading',   r_lheading],\n  ['paragraph',  r_paragraph]\n]\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock () {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() })\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  let line = startLine\n  let hasEmptyLines = false\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line)\n    if (line >= endLine) { break }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine\n      break\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line\n    let ok = false\n\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false)\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\")\n        }\n        break\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched')\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true\n    }\n\n    line = state.line\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true\n      line++\n      state.line = line\n    }\n  }\n}\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) { return }\n\n  const state = new this.State(src, md, env, outTokens)\n\n  this.tokenize(state, state.line, state.lineMax)\n}\n\nParserBlock.prototype.State = StateBlock\n\nexport default ParserBlock\n","// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  const left_flanking =\n    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)\n  const right_flanking =\n    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)\n\n  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)\n  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n","// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n","// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n","// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n","// Parse backticks\n\nexport default function backtick (state, silent) {\n  let pos = state.pos\n  const ch = state.src.charCodeAt(pos)\n\n  if (ch !== 0x60/* ` */) { return false }\n\n  const start = pos\n  pos++\n  const max = state.posMax\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n  const marker = state.src.slice(start, pos)\n  const openerLength = marker.length\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker\n    state.pos += openerLength\n    return true\n  }\n\n  let matchEnd = pos\n  let matchStart\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n    const closerLength = matchEnd - matchStart\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0)\n        token.markup = marker\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1')\n      }\n      state.pos = matchEnd\n      return true\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true\n\n  if (!silent) state.pending += marker\n  state.pos += openerLength\n  return true\n}\n","// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n","// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n","// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n","// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nimport { decodeHTML } from 'entities'\nimport { isValidEntityCode, fromCodePoint } from '../common/utils.mjs'\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i\nconst NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i\n\nexport default function entity (state, silent) {\n  const pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false\n\n  if (pos + 1 >= max) return false\n\n  const ch = state.src.charCodeAt(pos + 1)\n\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE)\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)\n\n        const token   = state.push('text_special', '', 0)\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD)\n        token.markup  = match[0]\n        token.info    = 'entity'\n      }\n      state.pos += match[0].length\n      return true\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE)\n    if (match) {\n      const decoded = decodeHTML(match[0])\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token   = state.push('text_special', '', 0)\n          token.content = decoded\n          token.markup  = match[0]\n          token.info    = 'entity'\n        }\n        state.pos += match[0].length\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters (delimiters) {\n  const openersBottom = {}\n  const max = delimiters.length\n\n  if (!max) return\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0\n  let lastTokenIdx = -2 // needs any value lower than -1\n  const jumps = []\n\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx]\n\n    jumps.push(0)\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx\n    }\n\n    lastTokenIdx = closer.token\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0\n\n    if (!closer.close) continue\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]\n    }\n\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]\n\n    let openerIdx = headerIdx - jumps[headerIdx] - 1\n\n    let newMinOpenerIdx = openerIdx\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx]\n\n      if (opener.marker !== closer.marker) continue\n\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open\n            ? jumps[openerIdx - 1] + 1\n            : 0\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump\n          jumps[openerIdx] = lastJump\n\n          closer.open  = false\n          opener.end   = closerIdx\n          opener.close = false\n          newMinOpenerIdx = -1\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2\n          break\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx\n    }\n  }\n}\n\nexport default function link_pairs (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  processDelimiters(state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters)\n    }\n  }\n}\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n","// markdown-it default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n}\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n"],"names":["_class","obj","isString","_hasOwnProperty","has","object","key","assign","source","arrayReplaceAt","src","pos","newElements","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","UNESCAPE_MD_RE","ENTITY_RE","UNESCAPE_ALL_RE","DIGITAL_ENTITY_TEST_RE","replaceEntityPattern","match","name","code","decoded","decodeHTML","unescapeMd","str","unescapeAll","escaped","entity","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","escapeHtml","REGEXP_ESCAPE_RE","escapeRE","isSpace","isWhiteSpace","isPunctChar","ucmicro.P","ucmicro.S","isMdAsciiPunct","normalizeReference","lib","mdurl","ucmicro","parseLinkLabel","state","start","disableNested","level","found","marker","prevPos","max","oldPos","labelEnd","parseLinkDestination","result","parseLinkTitle","prev_state","default_rules","tokens","idx","options","env","slf","token","info","langName","langAttrs","arr","highlighted","i","tmpAttrs","tmpToken","Renderer","l","needLf","nextToken","rules","len","type","Ruler","self","chains","rule","altName","chain","fn","index","opt","beforeName","ruleName","afterName","list","ignoreInvalid","chainName","Token","tag","nesting","attrs","attrData","value","StateCore","md","NEWLINES_RE","NULL_RE","normalize","block","inline","tok","isLinkOpen","isLinkClose","linkify","blockTokens","j","htmlLinkLevel","currentToken","text","links","nodes","lastPos","ln","url","fullUrl","urlText","token_o","token_t","token_c","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","replace","blkIdx","QUOTE_TEST_RE","QUOTE_RE","APOSTROPHE","replaceAt","process_inlines","stack","thisLevel","OUTER","t","canOpen","canClose","isSingle","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","item","openQuote","closeQuote","smartquotes","text_join","curr","last","_rules","r_normalize","r_block","r_inline","r_linkify","r_replacements","r_smartquotes","r_text_join","Core","StateBlock","s","indent","offset","indent_found","line","from","min","begin","end","keepLastLF","queue","lineIndent","lineStart","first","MAX_AUTOCOMPLETED_CELLS","getLine","escapedSplit","isEscaped","current","table","startLine","endLine","silent","nextLine","firstCh","secondCh","lineText","columns","aligns","columnCount","oldParentType","terminatorRules","token_to","tableLines","token_tho","token_htro","token_ho","token_il","tbodyLines","autocompletedCells","terminate","token_tbo","token_tro","token_tdo","fence","mem","markup","params","haveEndMarker","blockquote","oldLineMax","oldBMarks","oldBSCount","oldSCount","oldTShift","lastLineEmpty","isOutdented","initial","spaceAfterMarker","adjustTab","oldIndent","lines","hr","cnt","skipBulletListMarker","skipOrderedListMarker","markTightParagraphs","tight","isTerminatingParagraph","isOrdered","markerValue","posAfterMarker","markerCharCode","listTokIdx","listLines","prevEmptyEnd","contentStart","indentAfterMarker","itemLines","oldTight","oldListIndent","reference","_endLine","getNextLine","isContinuation","lineContent","destRes","href","destEndPos","destEndLineNo","titleRes","title","label","block_names","attr_name","unquoted","single_quoted","double_quoted","attr_value","attribute","open_tag","close_tag","comment","processing","declaration","cdata","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","html_block","heading","tmp","token_i","lheading","content","paragraph","r_table","r_code","r_fence","r_blockquote","r_hr","r_list","r_reference","r_html_block","r_heading","r_lheading","r_paragraph","ParserBlock","maxNesting","hasEmptyLines","prevLine","ok","outTokens","StateInline","token_meta","canSplitWord","count","left_flanking","right_flanking","isTerminatorChar","SCHEME_RE","proto","link","newline","pmax","ws","ESCAPED","escape","ch1","escapedStr","ch2","origStr","backtick","openerLength","matchEnd","matchStart","closerLength","strikethrough_tokenize","scanned","postProcess","delimiters","loneMarkers","startDelim","endDelim","strikethrough_postProcess","tokens_meta","r_strikethrough","emphasis_tokenize","isStrong","emphasis_post_process","r_emphasis","res","ref","parseReference","labelStart","image","EMAIL_RE","AUTOLINK_RE","autolink","isLetter","lc","html_inline","DIGITAL_RE","NAMED_RE","processDelimiters","openersBottom","headerIdx","lastTokenIdx","jumps","closerIdx","closer","minOpenerIdx","openerIdx","newMinOpenerIdx","opener","isOddMatch","lastJump","link_pairs","fragments_join","r_text","r_newline","r_escape","r_backticks","r_link","r_image","r_autolink","r_html_inline","r_entity","_rules2","r_balance_pairs","r_fragments_join","ParserInline","cache","cfg_default","cfg_zero","cfg_commonmark","config","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","RECODE_HOSTNAME_FOR","normalizeLink","parsed","mdurl.parse","punycode","mdurl.encode","mdurl.format","normalizeLinkText","mdurl.decode","MarkdownIt","presetName","utils.isString","ParserCore","LinkifyIt","utils","utils.assign","helpers","presets","missed","plugin","args"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]}